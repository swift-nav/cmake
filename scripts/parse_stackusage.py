#!/usr/bin/env python
#
# This script uses a file generated by the profiling tool Stackusage as input
# and writes the sum of the maximal used stack for all active threads into a
# log file.
#
# USAGE
#
#   python parse_stackusage.py [OPTIONS]
#
# Run the script by supplying an input file path to a Stackusage file and a
# file path to where the log file should be created.
#
# OPTIONS
# * -i, --input_file:  Sets the input file path.
# * -o, --output_file: Sets the output file path.
# * -m, --message:     Adds a message to the reported memory usage.
#
import sys, argparse

parser = argparse.ArgumentParser(description='Log sum of the maximal used stack for all active threads reported by Stackusage.')
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')
required.add_argument('-i','--input_file',
                      help='File path where a Stackusage file is located',
                      required=True)
required.add_argument('-o','--output_file',
                      help='File path where the log should be created',
                      required=True)
optional.add_argument('-m','--message',
                      help='Custom message that gets concatenated with the reported memory usage',
                      default='Stack memory usage:')
parser._action_groups.append(optional)
args = parser.parse_args()

try:
  finput = open(args.input_file)
  foutput = open(args.output_file,"a")
except IOError:
  exit()

with finput:
  lines = finput.readlines()
  total_stack = 0.0
  for line in lines:
    if any(s in line for s in ('stackusage', 'pid')):
      continue
    columns = line.split()
    total_stack = total_stack + int(columns[5])
    result = "{:.{}f}".format(total_stack / 1024 / 1024, 2) + "Mi"
  message = "{} {}\n".format(args.message, result)
  foutput.write(message)
finput.close()
foutput.close()

